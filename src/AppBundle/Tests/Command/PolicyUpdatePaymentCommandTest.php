<?php
/**
 * Created by PhpStorm.
 * User: blakepayne
 * Date: 03/04/19
 * Time: 10:09
 */

namespace AppBundle\Tests\Command;

use AppBundle\Document\BankAccount;
use Doctrine\ODM\MongoDB\DocumentManager;
use AppBundle\Command\OpsReportCommand;
use AppBundle\Command\PolicyUpdatePaymentCommand;
use AppBundle\Tests\Controller\BaseControllerTest;
use phpDocumentor\Reflection\Types\Static_;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Tester\CommandTester;
use AppBundle\Document\Payment\BacsPayment;
use AppBundle\Document\PhonePolicy;
use AppBundle\Document\Policy;

class PolicyUpdatePaymentCommandTest extends BaseControllerTest
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        /** @var DocumentManager $dm */
        $dm = $this->getDocumentManager();
        self::$dm = $dm;
    }

    public function callCommand($expectedOutput)
    {
        $application = new Application(self::$kernel);
        $application->add(new OpsReportCommand(self::$container->get('app.mailer'), self::$redis));
        $command = $application->find('sosure:policy:update:payment');
        $commandTester = new CommandTester($command);
        $commandTester->execute([
            'command' => $command,
            '--debug' => 1,
            '--dry-run' => true
        ]);
        $output = $commandTester->getDisplay();
        foreach ($expectedOutput as $item) {
            $this->assertContains($item, $output);
        }
    }

    public function testFindPoliciesMissingPaymentMethod()
    {
        $loop = 0;
        while ($loop < 10) {
            $user = static::createUser(
                static::$userManager,
                static::generateEmail('testFindPoliciesMissingPaymentMethod', $this, true),
                'bar',
                static::$dm
            );
            $policy = static::initPolicy(
                $user,
                static::$dm,
                $this->getRandomPhone(static::$dm),
                new \DateTime('2016-01-01'),
                true
            );

            self::setBacsPaymentMethodForPolicy($policy, BankAccount::MANDATE_SUCCESS);
            $oneMonthAgo = \DateTime::createFromFormat('U', time());
            $oneMonthAgo = $oneMonthAgo->sub(new \DateInterval('P1M'));
            $oneMonthAgo = $oneMonthAgo->sub(new \DateInterval('P5D'));

            $payment = static::addBacsPayPayment($policy, $oneMonthAgo, true);
            $payment->setStatus(BacsPayment::STATUS_SUCCESS);

            $policy->setStatus(PhonePolicy::STATUS_PENDING);
            static::$policyService->setEnvironment('prod');
            static::$policyService->create($policy, new \DateTime('2016-01-01'), true);
            static::$policyService->setEnvironment('test');
            static::$dm->flush();

            $this->assertEquals(Policy::STATUS_ACTIVE, $policy->getStatus());

            $renewalPolicy = static::$policyService->createPendingRenewal(
                $policy,
                new \DateTime('2016-12-15')
            );
            $policy->expire(new \DateTime(date('Y-m-d h:i:s')));
            $this->assertEquals(Policy::STATUS_PENDING_RENEWAL, $renewalPolicy->getStatus());

            static::$policyService->renew($policy, 12, null, false, new \DateTime('2016-12-30'));
            $this->assertEquals(Policy::STATUS_RENEWAL, $renewalPolicy->getStatus());
            $loop++;
        }
    }

    public function testCopyPaymentMethodFromPreviousWhenNewIsEmpty()
    {

    }
}
