# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:

services:
    app.user:
        class: AppBundle\Security\FOSUBUserProvider
        arguments: ["@fos_user.user_manager",{facebook: facebook_id}]
        calls:
            - [setFacebook, ['@app.facebook']]
            - [setRequestStack, ['@request_stack']]

    app.user.cognitoidentity:
        class: AppBundle\Security\CognitoIdentityUserProvider
        arguments:
            user_manager:   "@fos_user.user_manager"
            dm:             "@doctrine_mongodb.odm.default_document_manager"
            coginto:        "@aws.cognito"
            developerLogin: "%cognito_developer_login%"
            identityPoolId: "%aws_cognito_identitypoolid%"
            logger:         "@logger"
            facebook:       "@app.facebook"
            environment:    "%kernel.environment%"

    app.user.cognitoidentity.authenticator:
        class: AppBundle\Security\CognitoIdentityAuthenticator
        arguments:
            httpUtils: "@security.http_utils"
            logger:    "@logger"

    app.facebook:
        class: AppBundle\Service\FacebookService
        arguments:
            logger:             "@logger"
            router:             "@router"
            fb_appid:           "%fb_appid%"
            fb_secret:          "%fb_secret%"
            account_kit_secret: "%account_kit_secret%"

    app.mailchimp.prelaunch:
        class: AppBundle\Service\MailchimpService
        arguments:
          logger: "@logger"
          apikey: "%mailchimp_apikey%"
          list: "%mailchimp_prelaunch_list%"
          environment: "%kernel.environment%"

    app.gocardless:
        class: AppBundle\Service\GocardlessService
        arguments:
            dm:          "@doctrine_mongodb.odm.default_document_manager"
            logger:      "@logger"
            policy:      "@app.policy"
            accessToken: "%gocardless_apikey%"
            prod:        "%gocardless_prod%"

    app.fraud:
        class: AppBundle\Service\FraudService
        arguments:
            dm:          "@doctrine_mongodb.odm.default_document_manager"
            logger:      "@logger"

    app.judopay:
        class: AppBundle\Service\JudopayService
        arguments:
            dm:                   "@doctrine_mongodb.odm.default_document_manager"
            logger:               "@logger"
            policy:               "@app.policy"
            mailer:               "@app.mailer"
            apiToken:             "%judopay_apitoken%"
            apiSecret:            "%judopay_apisecret%"
            judoId:               "%judopay_id%"
            environment:          "%kernel.environment%"
            statsd:               "@statsd"
            webToken:             "%judopay_webtoken%"
            webSecret:            "%judopay_websecret%"
            dispatcher:           "@event_dispatcher"
            sms:                  "@app.sms"
            feature:              "@app.feature"

    app.barclays:
        class: AppBundle\Service\BarclaysService
        arguments:
            dm:          "@doctrine_mongodb.odm.default_document_manager"
            logger:      "@logger"

    app.lloyds:
        class: AppBundle\Service\LloydsService
        arguments:
            dm:          "@doctrine_mongodb.odm.default_document_manager"
            logger:      "@logger"

    app.user.launch:
        class: AppBundle\Service\LaunchUserService
        arguments:
            dm:         "@doctrine_mongodb.odm.default_document_manager"
            logger:     "@logger"
            mailchimp:  "@app.mailchimp.prelaunch"
            mailer:     "@app.mailer"
            templating: "@templating"
            router:     "@api.router"
            shortLink:  "@app.shortlink"

    app.invitation:
        class: AppBundle\Service\InvitationService
        arguments:
            dm:                   "@doctrine_mongodb.odm.default_document_manager"
            logger:               "@logger"
            mailer:               "@app.mailer"
            router:               "@api.router"
            shortLink:            "@app.shortlink"
            sms:                  "@app.sms"
            rateLimit:            "@app.ratelimit"
            push:                 "@app.push"
            environment:          "%kernel.environment%"
            dispatcher:           "@event_dispatcher"
            mixpanel:             "@app.mixpanel"

    app.digits:
        class: AppBundle\Service\DigitsService
        arguments:
            dm:                   "@doctrine_mongodb.odm.default_document_manager"
            logger:               "@logger"
            digitsConsumerKey:    "%digits_consumer_key%"
            allowedKeys:          "%allowed_digits_consumer_keys%"

    app.push:
        class: AppBundle\Service\PushService
        arguments:
            logger:     "@logger"
            sns:        "@aws.sns"

    app.claims:
        class: AppBundle\Service\ClaimsService
        arguments:
            dm:                   "@doctrine_mongodb.odm.default_document_manager"
            logger:               "@logger"
            mailer:               "@app.mailer"
            environment:          "%kernel.environment%"

    app.shortlink:
        class: AppBundle\Service\ShortLinkService
        arguments:
            logger:        "@logger"
            googleAppName: "%google_appname%"
            googleApiKey:  "%google_apikey%"
            statsd:        "@statsd"

    app.intercom:
        class: AppBundle\Service\IntercomService
        arguments:
            dm:             "@doctrine_mongodb.odm.default_document_manager"
            logger:         "@logger"
            intercom_token: "%intercom_token%"
            redis:          "@snc_redis.default"
            secure:         "%intercom_secure%"
            android:        "%intercom_secure_android%"
            ios:            "%intercom_secure_ios%"
            mailer:         "@mailer"
            router:         "@router"

    app.address:
        class: AppBundle\Service\PCAService
        arguments:
            dm:          "@doctrine_mongodb.odm.default_document_manager"
            logger:      "@logger"
            apiKey:      "%pca_apikey%"
            environment: "%kernel.environment%"
            redis:       "@snc_redis.default"

    app.geoip:
        class: AppBundle\Service\MaxMindIpService
        arguments:
            logger:     "@logger"
            cityDb:     "%geoip_city_db%"
            countryDb:  "%geoip_country_db%"

    app.cognito.identity:
        class: AppBundle\Service\CognitoIdentityService
        arguments:
            logger:         "@logger"
            dm:             "@doctrine_mongodb.odm.default_document_manager"
            coginto:        "@aws.cognito"
            developerLogin: "%cognito_developer_login%"
            identityPoolId: "%aws_cognito_identitypoolid%"
            environment:    "%kernel.environment%"

    base.imei:
        abstract: true
        class: AppBundle\Service\BaseImeiService
        calls:
            - [setLogger, ['@monolog.logger.receperio']]
            - [setDm, ['@doctrine_mongodb.odm.default_document_manager']]
            - [setRedis, ['@snc_redis.default']]

    app.imei:
        parent: base.imei
        class: AppBundle\Service\ReceperioService
        calls:
            - [setSecretKey, ['%receperio_secretkey%']]
            - [setStoreId, ['%receperio_storeid%']]
            - [setEnvironment, ['%kernel.environment%']]
            - [setRateLimit, ['@app.ratelimit']]
            - [setMailer, ['@app.mailer']]
            - [setStatsd, ['@statsd']]

    app.deviceatlas:
        class: AppBundle\Service\DeviceAtlasService
        arguments:
            logger:        "@logger"
            dm:            "@doctrine_mongodb.odm.default_document_manager"
            redis:         "@snc_redis.default"
            mailerService: "@app.mailer"

    app.sanctions:
        class: AppBundle\Service\SanctionsService
        arguments:
            dm:            "@doctrine_mongodb.odm.default_document_manager"
            logger:        "@logger"

    app.sms:
        class: AppBundle\Service\SmsService
        arguments:
            dm:             "@doctrine_mongodb.odm.default_document_manager"
            logger:         "@logger"
            router:         "@router"
            auth_id:        "%plivo_authid%"
            auth_token:     "%plivo_authtoken%"
            sending_number: "%plivo_sendingnumber%"
            templating:     "@templating"

    app.branch:
        class: AppBundle\Service\BranchService
        arguments:
            logger:            "@logger"
            router:            "@router"
            redis:             "@snc_redis.default"
            environment:       "%kernel.environment%"
            branchKey:         "%branch_key%"
            branchDomain:      "%branch_domain%"
            googleAppDownload: "%google_app_download%"
            appleAppDownload": "%apple_app_download%"

    app.request:
        class: AppBundle\Service\RequestService
        arguments:
            requestStack:     "@request_stack"
            logger:           "@logger"
            tokenStorage:     "@security.token_storage"
            adminCookieValue: "%sosure_employee_cookie_value%"

    app.twig.branch:
        class: AppBundle\Service\BranchTwigExtension
        arguments:
            branch:         "@app.branch"
            logger:         "@logger"
            requestService: "@app.request"
        public: true
        tags:
            - { name: twig.extension }

    app.twig.s3:
        class: AppBundle\Service\S3TwigExtension
        arguments:
            s3: "@aws.s3"
        public: false
        tags:
            - { name: twig.extension }

    app.twig.intercom:
        class: AppBundle\Service\IntercomTwigExtension
        arguments:
            intercom:     "@app.intercom"
            logger:       "@logger"
        public: false
        tags:
            - { name: twig.extension }

    app.twig.misc:
        class: AppBundle\Service\MiscTwigExtension
        arguments:
            requestStack: "@request_stack"
            logger:       "@logger"
        public: false
        tags:
            - { name: twig.extension }

    app.excel:
        class: AppBundle\Service\ExcelService
        arguments:
            logger:         "@logger"

    app.salva:
        class: AppBundle\Service\SalvaExportService
        arguments:
            dm:             "@doctrine_mongodb.odm.default_document_manager"
            logger:         "@logger"
            baseUrl:        "%salva_url%"
            username:       "%salva_username%"
            password:       "%salva_password%"
            rootDir:        "%kernel.root_dir%"
            redis:          "@snc_redis.default"
            s3:             "@aws.s3"
            environment:    "%kernel.environment%"
        tags:
            - { name: monolog.logger, channel: salva }

    base.s3email:
        abstract: true
        class: AppBundle\Service\S3EmailService
        calls:
            - [setLogger, ['@monolog.logger.receperio']]
            - [setDm, ['@doctrine_mongodb.odm.default_document_manager']]
            - [setExcel, ['@app.excel']]
            - [setS3, ['@aws.s3']]
            - [setEnvironment, ['%kernel.environment%']]

    app.davies:
        parent: base.s3email
        class: AppBundle\Service\DaviesService
        calls:
            - [setClaims, ['@app.claims']]
            - [setMailer, ['@app.mailer']]
            - [setBucket, ['ops.so-sure.com']]
            - [setPath, ['claims-report']]
            - [setValidator, ['@validator']]
            - [setFeature, ['@app.feature']]
        tags:
            - { name: monolog.logger, channel: davies }

    app.brightstar:
        parent: base.s3email
        class: AppBundle\Service\BrightstarService
        calls:
            - [setBucket, ['ops.so-sure.com']]
            - [setPath, ['brightstar-report']]
            - [setMailer, ['@app.mailer']]
        tags:
            - { name: monolog.logger, channel: davies }

    app.jwt:
        class: AppBundle\Service\JWTService
        arguments:
            logger:         "@logger"
            secret:         "%api_secret%"

    app.sequence:
        class: AppBundle\Service\SequenceService
        arguments:
            dm:             "@doctrine_mongodb.odm.default_document_manager"
            logger:         "@logger"

    app.policy:
        class: AppBundle\Service\PolicyService
        arguments:
            dm:                   "@doctrine_mongodb.odm.default_document_manager"
            logger:               "@logger"
            sequence:             "@app.sequence"
            mailer:               "@app.mailer"
            smtp:                 "@swiftmailer.transport.real"
            templating:           "@templating"
            router:               "@api.router"
            environment:          "%kernel.environment%"
            snappy_pdf:           "@knp_snappy.pdf"
            dispatcher:           "@event_dispatcher"
            s3:                   "@aws.s3"
            shortLink:            "@app.shortlink"
            statsd:               "@statsd"
            redis:                "@snc_redis.default"
            branch:               "@app.branch"
            address:              "@app.address"
            imeiValidator:        "@app.imei"
            rateLimit:            "@app.ratelimit"
            intercom:             "@app.intercom"

    app.invoice:
        class: AppBundle\Service\InvoiceService
        arguments:
            dm:                   "@doctrine_mongodb.odm.default_document_manager"
            logger:               "@logger"
            sequence:             "@app.sequence"
            mailer:               "@app.mailer"
            smtp:                 "@swiftmailer.transport.real"
            templating:           "@templating"
            environment:          "%kernel.environment%"
            snappy_pdf:           "@knp_snappy.pdf"
            s3:                   "@aws.s3"

    app.mailer:
        class: AppBundle\Service\MailerService
        arguments:
            mailer:               "@mailer"
            smtp:                 "@swiftmailer.transport.real"
            templating:           "@templating"
            router:               "@api.router"
            defaultSenderAddress: "%default_sender_address%"
            defaultSenderName:    "%default_sender_name%"
            baseUrl:              "%web_base_url%"

    app.ratelimit:
        class: AppBundle\Service\RateLimitService
        arguments:
            redis:          "@snc_redis.default"
            logger:         "@logger"
            environment:    "%kernel.environment%"

    statsd_client:
        class: Domnikl\Statsd\Connection\UdpSocket
        arguments:
            host:         "localhost"
            port:         "8125"

    statsd:
        class: Domnikl\Statsd\Client
        arguments:
            connection:         "@statsd_client"
            namespace:          "sosure"

    app.stats:
        class: AppBundle\Service\StatsService
        arguments:
            dm:             "@doctrine_mongodb.odm.default_document_manager"
            redis:          "@snc_redis.default"
            logger:         "@logger"

    app.logger.rollbar:
        class: AppBundle\Classes\Rollbar
        arguments:
            - access_token: '%rollbar_access_token%'

    app.logger.rollbar-security:
        class: AppBundle\Classes\Rollbar
        arguments:
            - access_token: '%rollbar_access_token%'

    app.logger.lineformatter:
        class: Monolog\Formatter\LineFormatter
        calls:
            - [includeStacktraces]

    aws.credentials:
        class: Aws\Credentials\Credentials
        arguments:
            key: "%aws_key%"
            secret: "%aws_secret%"

    aws.cognito:
        class: Aws\CognitoIdentity\CognitoIdentityClient
        arguments:
            -
                version: "latest"
                region: "eu-west-1"
                credentials: "@aws.credentials"

    aws.sns:
        class: Aws\Sns\SnsClient
        arguments:
            -
                version: "latest"
                region: "eu-west-1"
                credentials: "@aws.credentials"

    aws.s3:
        class: Aws\S3\S3Client
        arguments:
            -
                version: "latest"
                region: "eu-west-1"
                credentials: "@aws.credentials"

    api.router:
        class: AppBundle\Service\ApiRouterService
        arguments:
            router: "@router"
            listenPort: 8080
            httpPort: 80
            httpsPort: 443

    app.monitor:
        class: AppBundle\Service\MonitorService
        arguments:
            dm:       "@doctrine_mongodb.odm.default_document_manager"
            logger:   "@logger"
            redis:    "@snc_redis.default"
            intercom: "@app.intercom"
            mixpanel: "@app.mixpanel"
            judopay:  "@app.judopay"

    app.annie:
        class: AppBundle\Service\AppAnnieService
        arguments:
            dm:      "@doctrine_mongodb.odm.default_document_manager"
            logger:  "@logger"
            apiKey:  "%appannie_apikey%"
            stats:   "@app.stats"

    app.reporting:
        class: AppBundle\Service\ReportingService
        arguments:
            dm:                "@doctrine_mongodb.odm.default_document_manager"
            logger:            "@logger"
            excludedPolicyIds: "%report_excluded_policy_ids%"
            environment:       "%kernel.environment%"

    app.mixpanel:
        class: AppBundle\Service\MixpanelService
        arguments:
            dm:             "@doctrine_mongodb.odm.default_document_manager"
            logger:         "@logger"
            redis:          "@snc_redis.default"
            mixpanel:       "@mixpanel"
            requestService: "@app.request"
            environment:    "%kernel.environment%"
            apiSecret:      "%mixpanel_apisecret%"
            stats:          "@app.stats"
            censusService:  "@census.search"

    app.sixpack:
        class: AppBundle\Service\SixpackService
        arguments:
            dm:             "@doctrine_mongodb.odm.default_document_manager"
            logger:         "@logger"
            url:            "%sixpack_url%"
            requestService: "@app.request"
            mixpanel:       "@app.mixpanel"

    app.feature:
        class: AppBundle\Service\FeatureService
        arguments:
            dm:             "@doctrine_mongodb.odm.default_document_manager"
            logger:         "@logger"

    app.twig.feature:
        class: AppBundle\Service\FeatureTwigExtension
        arguments:
            featureService: "@app.feature"
        public: false
        tags:
            - { name: twig.extension }

    mixpanel:
        class:   Mixpanel
        factory: ['Mixpanel', getInstance]
        arguments: ['%mixpanel_apitoken%']

    app.voter.user:
        class: AppBundle\Security\UserVoter
        tags:
            - { name: security.voter }

    app.voter.policy:
        class: AppBundle\Security\PolicyVoter
        tags:
            - { name: security.voter }

    app.voter.invitation:
        class: AppBundle\Security\InvitationVoter
        tags:
            - { name: security.voter }

    app.voter.multiPay:
        class: AppBundle\Security\MultiPayVoter
        tags:
            - { name: security.voter }

    doctrine.listener.invitation:
        class:   AppBundle\Listener\DoctrineInvitationListener
        arguments:
            dispatcher: "@event_dispatcher"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: postPersist }
            -  { name: doctrine_mongodb.odm.event_listener, event: postUpdate  }

    doctrine.listener.lead:
        class:   AppBundle\Listener\DoctrineLeadListener
        arguments:
            dispatcher: "@event_dispatcher"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: postPersist }
            -  { name: doctrine_mongodb.odm.event_listener, event: postUpdate  }

    doctrine.listener.user:
        class:   AppBundle\Listener\DoctrineUserListener
        arguments:
            dispatcher: "@event_dispatcher"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: postPersist }
            -  { name: doctrine_mongodb.odm.event_listener, event: preUpdate  }
            -  { name: doctrine_mongodb.odm.event_listener, event: postUpdate  }

    doctrine.listener.company:
        class:   AppBundle\Listener\DoctrineCompanyListener
        arguments:
            dispatcher: "@event_dispatcher"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: postPersist }

    doctrine.listener.claim:
        class:   AppBundle\Listener\DoctrineClaimListener
        arguments:
            dispatcher: "@event_dispatcher"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: postPersist }
            -  { name: doctrine_mongodb.odm.event_listener, event: preUpdate  }

    doctrine.listener.connection:
        class:   AppBundle\Listener\DoctrineConnectionListener
        arguments:
            dispatcher: "@event_dispatcher"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: preUpdate  }

    doctrine.listener.salva:
        class:   AppBundle\Listener\DoctrineSalvaListener
        arguments:
            dispatcher:  "@event_dispatcher"
            environment: "%kernel.environment%"
            logger:      "@logger"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: preUpdate  }

    doctrine.listener.policy:
        class:   AppBundle\Listener\DoctrinePolicyListener
        arguments:
            dispatcher:  "@event_dispatcher"
            environment: "%kernel.environment%"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: preUpdate  }

    doctrine.listener.validation:
        class:   AppBundle\Listener\DoctrineValidationListener
        arguments:
            dispatcher:  "@event_dispatcher"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: prePersist }
            -  { name: doctrine_mongodb.odm.event_listener, event: preUpdate  }

    app.listener.validation:
        class:   AppBundle\Listener\ValidationListener
        arguments:
            validator: "@validator"
            logger:    "@logger"
        tags:
            -  { name: kernel.event_listener, event: event.validate, method: onValidateEvent }

    app.listener.policy:
        class:   AppBundle\Listener\PolicyListener
        arguments:
            policyService:        "@app.policy"
            logger:               "@logger"
        tags:
            -  { name: kernel.event_listener, event: event.connection.reduced, method: onConnectionReducedEvent }

    app.listener.user:
        class:   AppBundle\Listener\UserListener
        arguments:
            dm:                   "@doctrine_mongodb.odm.default_document_manager"
            logger:               "@logger"
            mailer:               "@app.mailer"
            redis:                "@snc_redis.default"
        tags:
            -  { name: kernel.event_listener, event: event.user.created, method: onUserCreatedEvent }
            -  { name: kernel.event_listener, event: event.user.updated, method: onUserUpdatedEvent }
            -  { name: kernel.event_listener, event: event.user.email.changed, method: onUserEmailChangedEvent }

    app.listener.intercom:
        class:   AppBundle\Listener\IntercomListener
        arguments:
            intercom: "@app.intercom"
        tags:
            -  { name: kernel.event_listener, event: event.lead.updated, method: onLeadUpdatedEvent }
            -  { name: kernel.event_listener, event: event.user.created, method: onUserCreatedEvent }
            -  { name: kernel.event_listener, event: event.user.updated, method: onUserUpdatedEvent }
            -  { name: kernel.event_listener, event: event.policy.created, method: onPolicyCreatedEvent }
            -  { name: kernel.event_listener, event: event.policy.pot, method: onPolicyPotEvent }
            -  { name: kernel.event_listener, event: event.policy.cancelled, method: onPolicyCancelledEvent }
            -  { name: kernel.event_listener, event: event.policy.pending-renewal, method: onPolicyPendingRenewedEvent }
            -  { name: kernel.event_listener, event: event.policy.renewed, method: onPolicyRenewedEvent }
            -  { name: kernel.event_listener, event: event.policy.start, method: onPolicyStartEvent }
            -  { name: kernel.event_listener, event: event.invitation.accepted, method: onInvitationAcceptedEvent }
            -  { name: kernel.event_listener, event: event.connection.connected, method: onConnectionConnectedEvent }
            -  { name: kernel.event_listener, event: event.payment.success, method: onPaymentSuccessEvent }
            -  { name: kernel.event_listener, event: event.payment.failed, method: onPaymentFailedEvent }
            -  { name: kernel.event_listener, event: event.payment.first-problem, method: onPaymentFirstProblemEvent }
            -  { name: kernel.event_listener, event: event.user.payment.failed, method: onUserPaymentFailedEvent }
            -  { name: kernel.event_listener, event: event.claim.created, method: onClaimCreatedEvent }
            -  { name: kernel.event_listener, event: event.claim.approved, method: onClaimApprovedEvent }
            -  { name: kernel.event_listener, event: event.claim.settled, method: onClaimSettledEvent }

    app.listener.sanctions:
        class:   AppBundle\Listener\SanctionsListener
        arguments:
            dm:                   "@doctrine_mongodb.odm.default_document_manager"
            logger:               "@logger"
            mailer:               "@app.mailer"
            sanctions:            "@app.sanctions"
        tags:
            -  { name: kernel.event_listener, event: event.user.created, method: onUserCreatedEvent }
            -  { name: kernel.event_listener, event: event.company.created, method: onCompanyCreatedEvent }

    app.listener.mixpanel:
        class:   AppBundle\Listener\MixpanelListener
        arguments:
            mixpanel: "@app.mixpanel"
        tags:
            -  { name: kernel.event_listener, event: event.payment.success, method: onPaymentSuccessEvent }
            -  { name: kernel.event_listener, event: event.policy.created, method: onPolicyCreatedEvent }
            -  { name: kernel.event_listener, event: event.policy.cancelled, method: onPolicyCancelledEvent }
            -  { name: kernel.event_listener, event: event.policy.renewed, method: onPolicyRenewedEvent }
            -  { name: kernel.event_listener, event: event.policy.cashback, method: onPolicyCashbackEvent }
            -  { name: kernel.event_listener, event: event.policy.declined-renewal, method: onPolicyDeclineRenewedEvent }

    app.listener.push:
        class:   AppBundle\Listener\PushListener
        arguments:
            push: "@app.push"
        tags:
            -  { name: kernel.event_listener, event: event.policy.pending-renewal, method: onPolicyPendingRenewalEvent }

    app.listener.salva:
        class:   AppBundle\Listener\SalvaListener
        arguments:
            salva: "@app.salva"
        tags:
            -  { name: kernel.event_listener, event: event.policy.created, method: onPolicyCreatedEvent }
            -  { name: kernel.event_listener, event: event.policy.salva_increment, method: onPolicySalvaIncrementEvent }
            -  { name: kernel.event_listener, event: event.policy.cancelled, method: onPolicyCancelledEvent }

    app.listener.refund:
        class:   AppBundle\Listener\RefundListener
        arguments:
            dm:      "@doctrine_mongodb.odm.default_document_manager"
            judopay: "@app.judopay"
            logger:  "@logger"
            environment: "%kernel.environment%"
        tags:
            -  { name: kernel.event_listener, event: event.policy.cancelled, method: onPolicyCancelledEvent }
            -  { name: kernel.event_listener, event: event.policy.created, method: refundFreeMonthPromo }

    app.listener.response:
        class:   AppBundle\Listener\KernelListener
        arguments:
            tokenStorage:     "@security.token_storage"
            authChecker:      "@security.authorization_checker"
            adminCookieValue: "%sosure_employee_cookie_value%"
            logger:           "@logger"
            environment:      "%kernel.environment%"
            domain:           "%sosure_employee_cookie_domain%"
        tags:
            -  { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
            -  { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }

    app.listener.security:
        class:   AppBundle\Listener\SecurityListener
        arguments:
            logger:        "@logger"
            requestStack:  "@request_stack"
            dispatcher:    "@event_dispatcher"
            mixpanel:      "@app.mixpanel"
        tags:
            -  { name: kernel.event_listener, event: security.interactive_login, method: onSecurityInteractiveLogin }
            -  { name: kernel.event_listener, event: security.interactive_login.actual, method: onActualSecurityInteractiveLogin }

    app.listener.mailer:
        class:  AppBundle\Listener\MailerListener
        # for now, comment out to avoid circular ref - add back once swift log emailer not in use
        # arguments: ["@logger"]
        tags:
          - { name: monolog.logger, channel: mailer }
          - { name: "swiftmailer.default.plugin" }

    app.form.type.usersearch:
        class: AppBundle\Form\Type\UserSearchType
        arguments: ["@request_stack", "%kernel.environment%"]
        tags:
            - { name: form.type }

    app.form.type.policysearch:
        class: AppBundle\Form\Type\PolicySearchType
        arguments: ["@request_stack", "%kernel.environment%"]
        tags:
            - { name: form.type }

    app.form.type.claimsearch:
        class: AppBundle\Form\Type\ClaimSearchType
        arguments: ["@request_stack"]
        tags:
            - { name: form.type }

    app.form.type.cashbacksearch:
        class: AppBundle\Form\Type\CashbackSearchType
        arguments: ["@request_stack", "%kernel.environment%"]
        tags:
            - { name: form.type }

    app.form.type.phonemake:
        class: AppBundle\Form\Type\PhoneMakeType
        arguments: ["@doctrine_mongodb.odm.default_document_manager", "%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.phonesearch:
        class: AppBundle\Form\Type\PhoneSearchType
        arguments: ["@request_stack"]
        tags:
            - { name: form.type }

    app.form.type.renew:
        class: AppBundle\Form\Type\RenewType
        arguments: ["@request_stack", "%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.renewcashback:
        class: AppBundle\Form\Type\RenewCashbackType
        arguments: ["@request_stack", "%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.cashback:
        class: AppBundle\Form\Type\CashbackType
        arguments: ["@request_stack", "%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.purchasesteppersonal:
        class: AppBundle\Form\Type\PurchaseStepPersonalType
        arguments: ["@request_stack", "%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.purchasesteppersonaladdress:
        class: AppBundle\Form\Type\PurchaseStepPersonalAddressType
        arguments: ["@request_stack", "%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.purchasestepaddress:
        class: AppBundle\Form\Type\PurchaseStepAddressType
        arguments: ["%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.purchasestepphone:
        class: AppBundle\Form\Type\PurchaseStepPhoneType
        arguments: ["@request_stack", "%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.claim:
        class: AppBundle\Form\Type\ClaimType
        arguments: ["@app.imei"]
        tags:
            - { name: form.type }

    app.form.type.claimcrimeref:
        class: AppBundle\Form\Type\ClaimCrimeRefType
        arguments: ["@app.imei"]
        tags:
            - { name: form.type }

    app.form.type.claimscheck:
        class: AppBundle\Form\Type\ClaimsCheckType
        arguments: ["@request_stack", "%form_required%"]
        tags:
            - { name: form.type }

    app.validator.age:
        class: AppBundle\Validator\Constraints\AgeValidator
        tags:
            - { name: validator.constraint_validator }

    app.validator.renewalconnectionsamount:
        class: AppBundle\Validator\Constraints\RenewalConnectionsAmount
        tags:
            - { name: validator.constraint_validator }

    app.validator.alphanumeric:
        class: AppBundle\Validator\Constraints\AlphanumericValidator
        tags:
            - { name: validator.constraint_validator }

    app.validator.alphanumericspacedot:
        class: AppBundle\Validator\Constraints\AlphanumericSpaceDotValidator
        tags:
            - { name: validator.constraint_validator }

    app.validator.token:
        class: AppBundle\Validator\Constraints\TokenValidator
        tags:
            - { name: validator.constraint_validator }

    app.validator.mobile:
        class: AppBundle\Validator\Constraints\MobileValidator
        tags:
            - { name: validator.constraint_validator }

    app.validator.imei:
        class: AppBundle\Validator\Constraints\ImeiValidator
        arguments: ["@app.imei"]
        tags:
            - { name: validator.constraint_validator }

    app.validator.postcode:
        class: AppBundle\Validator\Constraints\PostcodeValidator
        arguments: ["@app.address"]
        tags:
            - { name: validator.constraint_validator }

    app.validator.sortcode:
        class: AppBundle\Validator\Constraints\SortCodeValidator
        arguments: ["@app.address"]
        tags:
            - { name: validator.constraint_validator }

    app.validator.bankaccountnumber:
        class: AppBundle\Validator\Constraints\BankAccountNumberValidator
        arguments: ["@app.address"]
        tags:
            - { name: validator.constraint_validator }

    rollbar.voter.notfound:
        class: AppBundle\Security\NotFoundHttpExceptionVoter
        tags:
            - { name: staffim_rollbar.report_voter }

    rollbar.voter.untrustedhost:
        class: AppBundle\Security\UntrustedHostUnexpectedValueExceptionVoter
        tags:
            - { name: staffim_rollbar.report_voter }

    rollbar.voter.runtime:
        class: AppBundle\Security\RuntimeExceptionVoter
        tags:
            - { name: staffim_rollbar.report_voter }

    rollbar.voter.accessdenied:
        class: AppBundle\Security\AccessDeniedHttpExceptionVoter
        arguments:
            requestStack: "@request_stack"
            ips:          "%sosure_ips%"
        tags:
            - { name: staffim_rollbar.report_voter }

    sitemap.phone:
        class: AppBundle\Service\PhoneSitemapGenerator
        arguments:
            dm:          "@doctrine_mongodb.odm.default_document_manager"
            logger:      "@logger"
            router:      "@router"
        tags:
            - { name: dpn_xml_sitemap.generator }
    
    two_factor.persister:
        class: AppBundle\Service\DoctrinePersister
        arguments:
            dm:          "@doctrine_mongodb.odm.default_document_manager"

    twig.extension.intl:
        class: Twig_Extensions_Extension_Intl
        tags:
            - { name: twig.extension }

    census.search:
        class: CensusBundle\Service\SearchService
        arguments:
            dm:          "@doctrine_mongodb.odm.census_document_manager"

    app.gender:
        class: AppBundle\Service\GenderizeService
        arguments:
            dm:          "@doctrine_mongodb.odm.default_document_manager"
            logger:      "@logger"
