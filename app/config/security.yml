# To get started with security, check out the documentation:
# http://symfony.com/doc/current/book/security.html
security:

    encoders:
        FOS\UserBundle\Model\UserInterface: sha512

    # WARNING! see AppBundle\Document\User::has*Role() and maintain parity
    role_hierarchy:
        ROLE_EMPLOYEE:           ROLE_USER,ROLE_CLAIMS
        ROLE_CUSTOMER_SERVICES:  ROLE_USER,ROLE_CLAIMS,ROLE_EMPLOYEE
        ROLE_ADMIN:              ROLE_USER,ROLE_CLAIMS,ROLE_EMPLOYEE,ROLE_CUSTOMER_SERVICES

    access_decision_manager:
        strategy: unanimous

    providers:
        fos_userbundle:
            id: fos_user.user_provider.username
        cognito_identity_user_provider:
            id: app.user.cognitoidentity

    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
            provider: fos_userbundle

        oauth2_api:
            pattern:    ^/bearer-api
            fos_oauth: true
            stateless: true
            anonymous: true
            provider: fos_userbundle
        oauth_token:
            pattern:    ^/oauth/v2/token
            security:   false
        # Don't put a firewall on  ^/oauth/v2/auth, and no access_control on it either
        # It, and the main purchase flow must be on the same firewall context to stay logged in between them
        # while maintaining the redirect URL in the targetPath session

        api:
            pattern: ^/api
            stateless: true
            simple_preauth:
                authenticator: app.user.cognitoidentity.authenticator
            provider: cognito_identity_user_provider

        main:
            pattern: ^/
            form_login:
                provider: fos_userbundle
                default_target_path: /login-redirect
                always_use_default_target_path: false
                csrf_token_generator: security.csrf.token_manager
                failure_handler: peerj_user_security.component.authentication.handler.login_failure_handler
            logout:       true
            anonymous:    true
            provider: fos_userbundle
            security: true
            logout_on_user_change: true
            oauth:
                resource_owners:
                    facebook:           "/login/check-facebook"
                    google:             "/login/check-google"
                    starling:           "/login/check-starling"
                    accountkit:         "/login/check-accountkit"
                login_path:        /login
                check_path:        /login
                use_forward:       false
                failure_path:      /login
                default_target_path: /login-redirect

                oauth_user_provider:
                    service: app.user # hwi_oauth.user.provider
            remember_me:
                secret:   '%secret%'
                lifetime: 43200 # 12 hours in seconds
                path:     /
            switch_user: { role: ROLE_CUSTOMER_SERVICES, parameter: _impersonate }
            entry_point: App\Security\Oauth2LoginEntryPoint

    access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/, role: ROLE_EMPLOYEE }
        - { path: ^/claims/, role: ROLE_CLAIMS, ips: [ "%davies_ip%" ] }
        - { path: ^/claims/, role: ROLE_CLAIMS, ips: [ "%directgroup_ip%" ] }
        - { path: ^/claims/, role: ROLE_CLAIMS, ips: [ "%sosure_rwe_ip%" ] }
        - { path: ^/claims/, role: ROLE_CLAIMS, ips: [ "%sosure_patrick_ip%" ] }
        - { path: ^/claims/, role: ROLE_CLAIMS, ips: [ "127.0.0.1" ] }
        - { path: ^/claims/, role: ROLE_NO_ACCESS }
        - { path: ^/alpha$, role: ROLE_USER }
        - { path: ^/user/, role: ROLE_USER }
        - { path: ^/bearer-api, roles: [ IS_AUTHENTICATED_FULLY ] }
        - { path: ^/api, access: "isApiPort(8080)" }
