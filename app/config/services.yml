imports:
    - { resource: conf/advanced_services.yml }

# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:

services:
    _defaults:
        autowire: false      # Automatically injects dependencies in your services.
        autoconfigure: false # Automatically registers your services as commands, event subscribers, etc.
        public: true

    AppBundle\Security\FOSUBUserProvider:
        public: false
        arguments: ["@fos_user.user_manager",{facebook: facebookId, google: googleId, starling: starlingId, accountkit: id}]
        calls:
            - [setFacebook, ['@app.facebook']]
            - [setGoogle, ['@app.google']]
            - [setRequestStack, ['@request_stack']]
            - [setEncoderFactory, ["@security.encoder_factory"]]
            - [setAuthService, ["@security.authorization_checker"]]
            - [setDm, ["@doctrine_mongodb.odm.default_document_manager"]]
            - [setIntercom, ['@app.intercom']]
            - [setMixpanel, ['@app.mixpanel']]
            - [setMailer, ['@app.mailer']]

    app.user:
        alias: AppBundle\Security\FOSUBUserProvider
        public: true

    AppBundle\Security\CognitoIdentityUserProvider:
        autowire: false
        autoconfigure: false
        arguments:
            - "@fos_user.user_manager"
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@aws.cognito"
            - "%cognito_developer_login%"
            - "%aws_cognito_identitypoolid%"
            - "@logger"
            - "@app.facebook"
            - "%kernel.environment%"

    app.user.cognitoidentity:
        alias: AppBundle\Security\CognitoIdentityUserProvider
        public: true

    AppBundle\Security\CognitoIdentityAuthenticator:
        arguments:
            - "@security.http_utils"
            - "@logger"

    app.user.cognitoidentity.authenticator:
        alias: AppBundle\Security\CognitoIdentityAuthenticator
        public: true

    AppBundle\Service\FacebookService:
        arguments:
            - "@logger"
            - "@router"
            - "@doctrine_mongodb.odm.default_document_manager"
            - "%fb_appid%"
            - "%fb_secret%"
            - "%account_kit_secret%"
            - "%fb_business_id%"
            - "%fb_ad_account_id%"
            - "%fb_system_user_access_token%"
            - "%kernel.environment%"

    app.facebook:
        alias: AppBundle\Service\FacebookService
        public: true

    AppBundle\Service\GoogleService:
        arguments:
            - "@logger"
            - "%google_clientid%"

    app.google:
        alias: AppBundle\Service\GoogleService
        public: true

    AppBundle\Service\MailchimpService:
        arguments:
            - "@logger"
            - "%mailchimp_apikey%"
            - "%mailchimp_prelaunch_list%"
            - "%kernel.environment%"

    app.mailchimp.prelaunch:
        alias: AppBundle\Service\MailchimpService
        public: true

    app.fraud:
        alias: AppBundle\Service\FraudService
        public: true

    AppBundle\Service\FraudService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"

    app.judopay:
        alias: AppBundle\Service\JudopayService
        public: true

    AppBundle\Service\JudopayService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@app.policy"
            - "@app.mailer"
            - "%judopay_apitoken%"
            - "%judopay_apisecret%"
            - "%judopay_id%"
            - "%kernel.environment%"
            - "@statsd"
            - "%judopay_webtoken%"
            - "%judopay_websecret%"
            - "@event_dispatcher"
            - "@app.sms"
            - "@app.feature"

    app.checkout:
        alias: AppBundle\Service\CheckoutService
        public: true

    AppBundle\Service\CheckoutService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@app.policy"
            - "@app.mailer"
            - "%checkout_apisecret%"
            - "%checkout_apipublic%"
            - "%kernel.environment%"
            - "@statsd"
            - "@event_dispatcher"
            - "@app.sms"
            - "@app.feature"

    app.payment:
        alias: AppBundle\Service\PaymentService
        public: true

    AppBundle\Service\PaymentService:
        arguments:
            - "@app.judopay"
            - "@app.checkout"
            - "@app.router"
            - "@logger"
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@app.sequence"
            - "@app.mailer"
            - "%kernel.environment%"
            - "@app.fraud"
            - "@templating"
            - "@event_dispatcher"

    app.barclays:
        alias: AppBundle\Service\BarclaysService
        public: true

    AppBundle\Service\BarclaysService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"

    app.cashflows:
        alias: AppBundle\Service\CashflowsService
        public: true

    AppBundle\Service\CashflowsService:
        arguments:
        - "@doctrine_mongodb.odm.default_document_manager"
        - "@logger"

    app.lloyds:
        alias: AppBundle\Service\LloydsService
        public: true

    AppBundle\Service\LloydsService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"

    app.banking:
        alias: AppBundle\Service\BankingService
        public: true

    AppBundle\Service\BankingService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "%kernel.environment%"
            - "@snc_redis.default"

    app.user.launch:
        alias: AppBundle\Service\LaunchUserService

    AppBundle\Service\LaunchUserService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@app.mailchimp.prelaunch"
            - "@app.mailer"
            - "@templating"
            - "@app.router"
            - "@app.shortlink"

    app.invitation:
        alias: AppBundle\Service\InvitationService
        public: true

    AppBundle\Service\InvitationService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@app.mailer"
            - "@app.router"
            - "@app.shortlink"
            - "@app.sms"
            - "@app.ratelimit"
            - "@app.push"
            - "%kernel.environment%"
            - "@event_dispatcher"
            - "@app.mixpanel"

    app.scode:
        alias: AppBundle\Service\SCodeService
        public: true

    AppBundle\Service\SCodeService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@app.router"
            - "@app.shortlink"
            - "@app.branch"

    app.affiliate:
        class: AppBundle\Service\AffiliateService
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@app.policy"
            - "@aws.s3"
            - "%kernel.environment%"

    app.promotion:
        class: AppBundle\Service\PromotionService
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@app.mailer"
            - "@logger"

    app.bacs:
        alias: AppBundle\Service\BacsService
        public: true

    AppBundle\Service\BacsService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@aws.s3"
            - "%accesspay_s3file_password%"
            - "%kernel.environment%"
            - "@app.mailer"
            - "@snc_redis.default"
            - "@app.payment"
            - "@knp_snappy.pdf"
            - "@templating"
            - "@app.sequence"
            - ["%accesspay_server%", "%accesspay_username%", "%accesspay_password%", "%accesspay_keyfile%"]
            - "@app.mailer"
            - "@event_dispatcher"
            - "@app.sftp.sosure"
            - "@app.sftp.accesspay"

    app.push:
        alias: AppBundle\Service\PushService
        public: true

    AppBundle\Service\PushService:
        arguments:
            - "@logger"
            - "@aws.sns"
            - "@statsd"

    app.claims:
        alias: AppBundle\Service\ClaimsService
        public: true

    AppBundle\Service\ClaimsService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@app.mailer"
            - "@app.router"
            - "@app.imei"
            - "@snc_redis.default"
            - "%kernel.environment%"
            - "@oneup_flysystem.mount_manager"
            - "@app.feature"

    app.shortlink:
        alias: AppBundle\Service\ShortLinkService
        public: true

    AppBundle\Service\ShortLinkService:
        arguments:
            - "@logger"
            - "%google_appname%"
            - "%google_apikey%"
            - "@statsd"

    app.intercom:
        alias: AppBundle\Service\IntercomService
        public: true

    AppBundle\Service\IntercomService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "%intercom_token%"
            - "@snc_redis.default"
            - "%intercom_secure%"
            - "%intercom_secure_android%"
            - "%intercom_secure_ios%"
            - "@app.mailer"
            - "@app.router"
            - '%intercom_dpa_app_admin%'
            - "@app.sanctions"
            - "@app.ratelimit"

    app.address:
        alias: AppBundle\Service\PCAService
        public: true

    AppBundle\Service\PCAService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "%pca_apikey%"
            - "%kernel.environment%"
            - "@snc_redis.default"
            - "@census.search"

    app.geoip:
        alias: AppBundle\Service\MaxMindIpService
        public: true

    AppBundle\Service\MaxMindIpService:
        arguments:
            - "@logger"
            - "%geoip_city_db%"
            - "%geoip_country_db%"
            - "@statsd"

    app.cognito.identity:
        alias: AppBundle\Service\CognitoIdentityService
        public: true

    AppBundle\Service\CognitoIdentityService:
        arguments:
            - "@logger"
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@aws.cognito"
            - "%cognito_developer_login%"
            - "%aws_cognito_identitypoolid%"
            - "%kernel.environment%"

    base.imei:
        alias: AppBundle\Service\BaseImeiService

    AppBundle\Service\BaseImeiService:
        abstract: true
        public: true
        calls:
            - [setLogger, ['@monolog.logger.receperio']]
            - [setDm, ['@doctrine_mongodb.odm.default_document_manager']]
            - [setMountManager, ['@oneup_flysystem.mount_manager']]
            - [setRedis, ['@snc_redis.default']]

    app.imei:
        alias: AppBundle\Service\ReceperioService

    AppBundle\Service\ReceperioService:
        parent: base.imei
        autowire: false
        autoconfigure: false
        public: true
        calls:
            - [setSecretKey, ['%receperio_secretkey%']]
            - [setStoreId, ['%receperio_storeid%']]
            - [setEnvironment, ['%kernel.environment%']]
            - [setRateLimit, ['@app.ratelimit']]
            - [setMailer, ['@app.mailer']]
            - [setStatsd, ['@statsd']]

    app.sanctions:
        alias: AppBundle\Service\SanctionsService
        public: true

    AppBundle\Service\SanctionsService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"

    app.sms:
        alias: AppBundle\Service\SmsService
        public: true

    AppBundle\Service\SmsService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@router"
            - "%plivo_authid%"
            - "%plivo_authtoken%"
            - "%plivo_sendingnumber%"
            - "@templating"
            - "@snc_redis.default"
            - "%kernel.environment%"
            - "@app.mixpanel"

    app.branch:
        alias: AppBundle\Service\BranchService
        public: true

    AppBundle\Service\BranchService:
        arguments:
            - "@logger"
            - "@app.router"
            - "@snc_redis.default"
            - "%kernel.environment%"
            - "%branch_key%"
            - "%branch_secret%"
            - "%branch_domain%"
            - "%google_app_download%"
            - "%apple_app_download%"

    app.request:
        alias: AppBundle\Service\RequestService
        public: true

    AppBundle\Service\RequestService:
        arguments:
            - "@request_stack"
            - "@logger"
            - "@security.token_storage"
            - "%sosure_employee_cookie_value%"
            - "%kernel.environment%"
            - "%analytics_ips%"

    app.twig.branch:
        class: AppBundle\Service\BranchTwigExtension
        arguments:
            - "@app.branch"
            - "@logger"
            - "@app.request"
        tags:
            - { name: twig.extension }

    app.twig.accountkit:
        class: AppBundle\Service\AccountkitTwigExtension
        arguments:
            - "@hwi_oauth.resource_owner.accountkit"
            - "@logger"
        public: true
        tags:
            - { name: twig.extension }

    app.twig.s3:
        class: AppBundle\Service\S3TwigExtension
        arguments:
            - "@aws.s3"
        public: true
        tags:
            - { name: twig.extension }

    app.twig.intercom:
        class: AppBundle\Service\IntercomTwigExtension
        arguments:
            - "@app.intercom"
            - "@logger"
        public: false
        tags:
            - { name: twig.extension }

    app.twig.claims:
        class: AppBundle\Service\ClaimsTwigExtension
        arguments:
            - "@aws.s3"
            - "@app.router"
            - "@app.request"
        public: false
        tags:
            - { name: twig.extension }

    app.twig.misc:
        class: AppBundle\Service\MiscTwigExtension
        arguments:
            - "@request_stack"
            - "@logger"
            - "@router"
        public: false
        tags:
            - { name: twig.extension }

    app.twig.policy:
        class: AppBundle\Service\PolicyTwigExtension
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
        public: false
        tags:
            - { name: twig.extension }

    app.twig.request:
        class: AppBundle\Service\RequestTwigExtension
        arguments:
            - "@app.request"
            - "@logger"
        public: false
        tags:
            - { name: twig.extension }

    app.excel:
        alias: AppBundle\Service\ExcelService
        public: true

    AppBundle\Service\ExcelService:
        arguments:
            - "@logger"

    app.salva:
        alias: AppBundle\Service\SalvaExportService
        public: true

    AppBundle\Service\SalvaExportService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "%salva_url%"
            - "%salva_username%"
            - "%salva_password%"
            - "%kernel.root_dir%"
            - "@snc_redis.default"
            - "@aws.s3"
            - "%kernel.environment%"
            - "@app.feature"
        tags:
            - { name: monolog.logger, channel: salva }

    base.s3email:
        alias: AppBundle\Service\S3EmailService
        public: true

    AppBundle\Service\S3EmailService:
        abstract: true
        public: true
        calls:
            - [setLogger, ['@monolog.logger.receperio']]
            - [setDm, ['@doctrine_mongodb.odm.default_document_manager']]
            - [setExcel, ['@app.excel']]
            - [setS3, ['@aws.s3']]
            - [setEnvironment, ['%kernel.environment%']]

    base.excelsftp:
        alias: AppBundle\Service\ExcelSftpService
        public: true

    AppBundle\Service\ExcelSftpService:
        abstract: true
        public: true
        calls:
            - [setLogger, ['@monolog.logger.receperio']]
            - [setDm, ['@doctrine_mongodb.odm.default_document_manager']]
            - [setExcel, ['@app.excel']]
            - [setS3, ['@aws.s3']]
            - [setEnvironment, ['%kernel.environment%']]

    app.davies:
        alias: AppBundle\Service\DaviesService
        public: true

    AppBundle\Service\DaviesService:
        parent: base.s3email
        autowire: false
        autoconfigure: false
        public: true
        calls:
            - [setClaims, ['@app.claims']]
            - [setMailer, ['@app.mailer']]
            - [setBucket, ['ops.so-sure.com']]
            - [setPath, ['claims-report']]
            - [setValidator, ['@validator']]
            - [setFeature, ['@app.feature']]
        tags:
            - { name: monolog.logger, channel: davies }

    app.directgroup:
        alias: AppBundle\Service\DirectGroupService
        public: true

    AppBundle\Service\DirectGroupService:
        parent: base.excelsftp
        autowire: false
        autoconfigure: false
        public: true
        calls:
            - [setClaims, ['@app.claims']]
            - [setMailer, ['@app.mailer']]
            - [setBucket, ['ops.so-sure.com']]
            - [setPath, ['directgroup-report']]
            - [setValidator, ['@validator']]
            - [setFeature, ['@app.feature']]
            - [setServer, ['%directgroup_sftp_server%']]
            - [setUsername, ['%directgroup_sftp_username%']]
            - [setPassword, ['%directgroup_sftp_password%']]
            - [setZipPassword, ['%directgroup_zip_password%']]
        tags:
            - { name: monolog.logger, channel: directgroup }

    app.sftp.directgroup:
        class: AppBundle\Service\SftpService
        autowire: false
        autoconfigure: false
        public: true
        arguments:
            - "@logger"
            - ["%directgroup_sftp_server%", "%directgroup_sftp_username%", "%directgroup_sftp_password%", "", ".", "false"]
        tags:
        - { name: monolog.logger, channel: directgroup }

    app.sftp.sosure:
        class: AppBundle\Service\SftpService
        autowire: false
        autoconfigure: false
        public: true
        arguments:
        - "@logger"
        - ["%sosure_sftp_server%", "%sosure_sftp_username%", "%sosure_sftp_password%", "%sosure_sftp_keyfile%", "sftp", "true"]

    app.sftp.accesspay:
        class: AppBundle\Service\SftpService
        autowire: false
        autoconfigure: false
        public: true
        arguments:
        - "@logger"
        - ["%accesspay_server%", "%accesspay_username%", "%accesspay_password%", "%accesspay_keyfile%", ".", "false"]

    app.brightstar:
        alias: AppBundle\Service\BrightstarService
        public: true

    AppBundle\Service\BrightstarService:
        parent: base.s3email
        autowire: false
        autoconfigure: false
        public: true
        calls:
            - [setBucket, ['ops.so-sure.com']]
            - [setPath, ['brightstar-report']]
            - [setMailer, ['@app.mailer']]
        tags:
            - { name: monolog.logger, channel: davies }

    app.jwt:
        alias: AppBundle\Service\JWTService
        public: true

    AppBundle\Service\JWTService:
        arguments:
            - "@logger"
            - "%api_secret%"

    app.sequence:
        alias: AppBundle\Service\SequenceService
        public: true

    AppBundle\Service\SequenceService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"

    app.policy:
        alias: AppBundle\Service\PolicyService
        public: true

    AppBundle\Service\PolicyService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@app.sequence"
            - "@app.mailer"
            - "@swiftmailer.transport.real"
            - "@templating"
            - "@app.router"
            - "%kernel.environment%"
            - "@knp_snappy.pdf"
            - "@event_dispatcher"
            - "@aws.s3"
            - "@app.shortlink"
            - "@statsd"
            - "@snc_redis.default"
            - "@app.branch"
            - "@census.search"
            - "@app.imei"
            - "@app.ratelimit"
            - "@app.intercom"
            - "@app.sms"
            - "@app.scode"
            - "@app.sixpack"
            - "@app.feature"

    app.quote:
        alias: AppBundle\Service\QuoteService
        public: true

    AppBundle\Service\QuoteService:
        arguments:
            - "@app.mailer"
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@snc_redis.default"

    app.invoice:
        alias: AppBundle\Service\InvoiceService
        public: true

    AppBundle\Service\InvoiceService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@app.sequence"
            - "@app.mailer"
            - "@swiftmailer.transport.real"
            - "@templating"
            - "%kernel.environment%"
            - "@knp_snappy.pdf"
            - "@aws.s3"

    app.mailer:
        alias: AppBundle\Service\MailerService
        public: true

    AppBundle\Service\MailerService:
        arguments:
            - "@mailer"
            - "@swiftmailer.transport.real"
            - "@templating"
            - "@app.router"
            - "%default_sender_address%"
            - "%default_sender_name%"
            - "@app.mixpanel"
            - "@aws.s3"
            - "%kernel.environment%"
            - "@doctrine_mongodb.odm.default_document_manager"
            - "%online%"

    app.router:
        alias: AppBundle\Service\RouterService
        public: true

    AppBundle\Service\RouterService:
        arguments:
            - "@router"
            - "%web_base_url%"

    app.ratelimit:
        alias: AppBundle\Service\RateLimitService
        public: true

    AppBundle\Service\RateLimitService:
        arguments:
            - "@snc_redis.default"
            - "@logger"
            - "%kernel.environment%"
            - "@app.feature"
            - "%sosure_ips%"

    statsd_client:
        class: Domnikl\Statsd\Connection\UdpSocket
        arguments:
            - "localhost"
            - "8125"

    statsd:
        class: Domnikl\Statsd\Client
        arguments:
            - "@statsd_client"
            - "sosure"

    app.stats:
        alias: AppBundle\Service\StatsService
        public: true

    AppBundle\Service\StatsService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@snc_redis.default"
            - "@logger"

    app.phone:
        alias: AppBundle\Service\PhoneService
        public: true

    AppBundle\Service\PhoneService:
        arguments:
            - "@logger"

    app.logger.lineformatter:
        alias: Monolog\Formatter\LineFormatter
        public: true

    Monolog\Formatter\LineFormatter:
        calls:
            - [includeStacktraces]

    aws.credentials:
        class: Aws\Credentials\Credentials
        arguments:
            - "%aws_key%"
            - "%aws_secret%"

    aws.cognito:
        class: Aws\CognitoIdentity\CognitoIdentityClient
        arguments:
            -
                version: "latest"
                region: "eu-west-1"
                credentials: "@aws.credentials"

    aws.sns:
        class: Aws\Sns\SnsClient
        arguments:
            -
                version: "latest"
                region: "eu-west-1"
                credentials: "@aws.credentials"

    aws.s3:
        alias: Aws\S3\S3Client
        public: true

    Aws\S3\S3Client:
        arguments:
            -
                version: "latest"
                region: "eu-west-1"
                credentials: "@aws.credentials"

    api.router:
        class: AppBundle\Service\ApiRouterService
        arguments:
            - "@router"
            - 8080
            - 80
            - 443

    app.monitor:
        alias: AppBundle\Service\MonitorService
        public: true

    AppBundle\Service\MonitorService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@snc_redis.default"
            - "@app.intercom"
            - "@app.mixpanel"
            - "@app.judopay"

    app.annie:
        alias: AppBundle\Service\AppAnnieService
        public: true

    AppBundle\Service\AppAnnieService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "%appannie_apikey%"
            - "@app.stats"

    AppBundle\Service\ReportingService: '@app.reporting'
    app.reporting:
        class: AppBundle\Service\ReportingService
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "%report_excluded_policy_ids%"
            - "%kernel.environment%"
            - "@snc_redis.default"

    app.mixpanel:
        alias: AppBundle\Service\MixpanelService
        public: true

    AppBundle\Service\MixpanelService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@snc_redis.default"
            - "@mixpanel"
            - "@app.request"
            - "%mixpanel_apisecret%"
            - "@app.stats"
            - "@census.search"

    app.sixpack:
        alias: AppBundle\Service\SixpackService
        public: true

    AppBundle\Service\SixpackService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "%sixpack_url%"
            - "@app.request"
            - "@app.mixpanel"

    app.feature:
        alias: AppBundle\Service\FeatureService
        public: true

    AppBundle\Service\FeatureService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"

    app.twig.feature:
        class: AppBundle\Service\FeatureTwigExtension
        arguments:
            - "@app.feature"
        public: false
        tags:
            - { name: twig.extension }

    mixpanel:
        class:   Mixpanel
        factory: ['Mixpanel', getInstance]
        arguments: ['%mixpanel_apitoken%']

    app.voter.user:
        alias: AppBundle\Security\UserVoter
        public: true

    AppBundle\Security\UserVoter:
        tags:
            - { name: security.voter }

    app.voter.policy:
        alias: AppBundle\Security\PolicyVoter
        public: true

    AppBundle\Security\PolicyVoter:
        tags:
            - { name: security.voter }

    app.voter.claim:
        alias: AppBundle\Security\ClaimVoter
        public: true

    AppBundle\Security\ClaimVoter:
        tags:
            - { name: security.voter }

    app.voter.invitation:
        alias: AppBundle\Security\InvitationVoter
        public: true

    AppBundle\Security\InvitationVoter:
        tags:
            - { name: security.voter }

    app.voter.multiPay:
        alias: AppBundle\Security\MultiPayVoter
        public: true

    AppBundle\Security\MultiPayVoter:
        tags:
            - { name: security.voter }

    base.doctrine:
        alias: AppBundle\Listener\BaseDoctrineListener

    AppBundle\Listener\BaseDoctrineListener:
        abstract: true
        public: true
        calls:
            - [setReader, ['@annotations.reader']]
            - [setLogger, ['@logger']]

    doctrine.listener.invitation:
        class:   AppBundle\Listener\DoctrineInvitationListener
        arguments:
            - "@event_dispatcher"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: postPersist }
            -  { name: doctrine_mongodb.odm.event_listener, event: postUpdate  }

    doctrine.listener.lead:
        class:   AppBundle\Listener\DoctrineLeadListener
        arguments:
            - "@event_dispatcher"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: postPersist }
            -  { name: doctrine_mongodb.odm.event_listener, event: postUpdate  }

    doctrine.listener.user:
        parent: base.doctrine
        autowire: false
        autoconfigure: false
        public: true
        class:   AppBundle\Listener\DoctrineUserListener
        arguments:
            - "@event_dispatcher"
            - "@logger"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: postPersist }
            -  { name: doctrine_mongodb.odm.event_listener, event: preUpdate  }
            -  { name: doctrine_mongodb.odm.event_listener, event: preRemove  }

    doctrine.listener.company:
        class:   AppBundle\Listener\DoctrineCompanyListener
        arguments:
            - "@event_dispatcher"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: postPersist }

    doctrine.listener.claim:
        parent: base.doctrine
        autowire: false
        autoconfigure: false
        public: true
        class:   AppBundle\Listener\DoctrineClaimListener
        arguments:
            - "@event_dispatcher"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: postPersist }
            -  { name: doctrine_mongodb.odm.event_listener, event: preUpdate  }

    doctrine.listener.connection:
        parent: base.doctrine
        autowire: false
        autoconfigure: false
        public: true
        class:   AppBundle\Listener\DoctrineConnectionListener
        arguments:
            - "@event_dispatcher"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: preUpdate  }

    doctrine.listener.salva:
        parent: base.doctrine
        autowire: false
        autoconfigure: false
        public: true
        class:   AppBundle\Listener\DoctrineSalvaListener
        arguments:
            - "@event_dispatcher"
            - "%kernel.environment%"
            - "@logger"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: preUpdate  }

    doctrine.listener.policy:
        class:   AppBundle\Listener\DoctrinePolicyListener
        arguments:
            - "@event_dispatcher"
            - "%kernel.environment%"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: preUpdate  }
            -  { name: doctrine_mongodb.odm.event_listener, event: preRemove  }

    doctrine.listener.validation:
        class:   AppBundle\Listener\DoctrineValidationListener
        arguments:
            - "@event_dispatcher"
        tags:
            -  { name: doctrine_mongodb.odm.event_listener, event: prePersist }
            -  { name: doctrine_mongodb.odm.event_listener, event: preUpdate  }

    app.listener.validation:
        class:   AppBundle\Listener\ValidationListener
        arguments:
            - "@validator"
            - "@logger"
        tags:
            -  { name: kernel.event_listener, event: event.validate, method: onValidateEvent }

    app.listener.policy:
        class:   AppBundle\Listener\PolicyListener
        arguments:
            - "@app.policy"
            - "@logger"
        tags:
            -  { name: kernel.event_listener, event: event.connection.reduced, method: onConnectionReducedEvent }

    app.listener.user:
        class:   AppBundle\Listener\UserListener
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@app.mailer"
            - "@snc_redis.default"
            - "@app.user"
        tags:
            -  { name: kernel.event_listener, event: event.user.created, method: onUserCreatedEvent }
            -  { name: kernel.event_listener, event: event.user.updated.invitation-link, method: onUserUpdatedEvent }
            -  { name: kernel.event_listener, event: event.user.email.changed, method: onUserEmailChangedEvent }
            -  { name: kernel.event_listener, event: event.user.password.changed, method: onUserPasswordChangedEvent }

    app.listener.tasteCard:
        class: AppBundle\Listener\TasteCardListener
        arguments:
            - "@app.mailer"
        tags:
            - { name: kernel.event_listener, event: event.policy.cancelled, method: onPolicyCancelledEvent }

    app.listener.bacs:
        class:   AppBundle\Listener\BacsListener
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@app.validator.bankaccountname"
            - "@app.bacs"
        tags:
            -  { name: kernel.event_listener, event: event.user.name.updated, method: onUserNameChangedEvent }
            -  { name: kernel.event_listener, event: event.bacs.updated, method: onBankAccountChangedEvent }
            -  { name: kernel.event_listener, event: event.policy.bacs-created, method: onPolicyBacsCreated }
            -  { name: kernel.event_listener, event: event.policy.updated-premium, method: onPolicyUpdatedPremium }
            -  { name: kernel.event_listener, event: event.policy.updated-billing, method: onPolicyUpdatedBilling }

    app.listener.debtCollection:
        class:   AppBundle\Listener\DebtCollectionListener
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
        tags:
            -  { name: kernel.event_listener, event: event.payment.success, method: onPaymentSuccessEvent }

    app.listener.trustpilot:
        class:   AppBundle\Listener\TrustpilotListener
        arguments:
        - "@app.mailer"
        tags:
        -  { name: kernel.event_listener, event: event.policy.created, method: onPolicyCreatedEvent }

    app.listener.gocompare:
        class:   AppBundle\Listener\GoCompareListener
        arguments:
        - "@logger"
        - "%kernel.environment%"
        tags:
        -  { name: kernel.event_listener, event: event.policy.created, method: onPolicyCreatedEvent }
        -  { name: kernel.event_listener, event: event.policy.cancelled, method: onPolicyCancelledEvent }

    app.listener.intercom:
        class:   AppBundle\Listener\IntercomListener
        arguments:
            - "@app.intercom"
        tags:
            -  { name: kernel.event_listener, event: event.lead.updated, method: onLeadUpdatedEvent }
            -  { name: kernel.event_listener, event: event.user.created, method: onUserCreatedEvent }
            -  { name: kernel.event_listener, event: event.user.updated.intercom, method: onUserUpdatedEvent }
            -  { name: kernel.event_listener, event: event.policy.created, method: onPolicyCreatedEvent }
            -  { name: kernel.event_listener, event: event.policy.pot, method: onPolicyPotEvent }
            -  { name: kernel.event_listener, event: event.policy.cancelled, method: onPolicyCancelledEvent }
            -  { name: kernel.event_listener, event: event.policy.pending-renewal, method: onPolicyPendingRenewedEvent }
            -  { name: kernel.event_listener, event: event.policy.renewed, method: onPolicyRenewedEvent }
            -  { name: kernel.event_listener, event: event.policy.start, method: onPolicyStartEvent }
            -  { name: kernel.event_listener, event: event.policy.unpaid, method: onPolicyUnpaidEvent }
            -  { name: kernel.event_listener, event: event.policy.reactivated, method: onPolicyReactivatedEvent }
            -  { name: kernel.event_listener, event: event.invitation.accepted, method: onInvitationAcceptedEvent }
            -  { name: kernel.event_listener, event: event.connection.connected, method: onConnectionConnectedEvent }
            -  { name: kernel.event_listener, event: event.payment.success, method: onPaymentSuccessEvent }
            -  { name: kernel.event_listener, event: event.payment.failed, method: onPaymentFailedEvent }
            -  { name: kernel.event_listener, event: event.payment.first-problem, method: onPaymentFirstProblemEvent }
            -  { name: kernel.event_listener, event: event.user.payment.failed, method: onUserPaymentFailedEvent }
            -  { name: kernel.event_listener, event: event.claim.created, method: onClaimCreatedEvent }
            -  { name: kernel.event_listener, event: event.claim.approved, method: onClaimApprovedEvent }
            -  { name: kernel.event_listener, event: event.claim.settled, method: onClaimSettledEvent }
            -  { name: kernel.event_listener, event: event.picsure.received, method: onPicSureReceivedEvent }
            -  { name: kernel.event_listener, event: event.picsure.approved, method: onPicSureUndamagedEvent }
            -  { name: kernel.event_listener, event: event.picsure.invalid, method: onPicSureInvalidEvent }
            -  { name: kernel.event_listener, event: event.picsure.rejected, method: onPicSureDamagedEvent }

    app.listener.sanctions:
        class:   AppBundle\Listener\SanctionsListener
        arguments:
            - "@app.sanctions"
            - "@snc_redis.default"
        tags:
            -  { name: kernel.event_listener, event: event.user.created, method: onUserCreatedEvent }
            -  { name: kernel.event_listener, event: event.company.created, method: onCompanyCreatedEvent }

    app.listener.mixpanel:
        class:   AppBundle\Listener\MixpanelListener
        arguments:
            - "@app.mixpanel"
            - "%kernel.environment%"
        tags:
            -  { name: kernel.event_listener, event: event.payment.success, method: onPaymentSuccessEvent }
            -  { name: kernel.event_listener, event: event.policy.created, method: onPolicyCreatedEvent }
            -  { name: kernel.event_listener, event: event.policy.cancelled, method: onPolicyCancelledEvent }
            -  { name: kernel.event_listener, event: event.policy.renewed, method: onPolicyRenewedEvent }
            -  { name: kernel.event_listener, event: event.policy.cashback, method: onPolicyCashbackEvent }
            -  { name: kernel.event_listener, event: event.policy.declined-renewal, method: onPolicyDeclineRenewedEvent }
            -  { name: kernel.event_listener, event: event.policy.updated-status, method: onPolicyStatusEvent }
            -  { name: kernel.event_listener, event: event.card.updated, method: onCardUpdatedEvent }
            -  { name: kernel.event_listener, event: event.bacs.updated, method: onBacsUpdatedEvent }
            -  { name: kernel.event_listener, event: event.policy.payment-method.changed, method: onPolicyPaymentMethodChangedEvent }

    app.listener.sixpack:
        class:   AppBundle\Listener\SixpackListener
        arguments:
            - "@app.sixpack"
            - "@logger"
        tags:
            -  { name: kernel.event_listener, event: event.policy.created, method: onPolicyCreatedEvent }

    app.listener.push:
        class:   AppBundle\Listener\PushListener
        arguments:
            - "@app.push"
        tags:
            -  { name: kernel.event_listener, event: event.policy.pending-renewal, method: onPolicyPendingRenewalEvent }

    app.listener.salva:
        class:   AppBundle\Listener\SalvaListener
        arguments:
            - "@app.salva"
        tags:
            -  { name: kernel.event_listener, event: event.policy.created, method: onPolicyCreatedEvent }
            -  { name: kernel.event_listener, event: event.policy.salva_increment, method: onPolicySalvaIncrementEvent }
            -  { name: kernel.event_listener, event: event.policy.cancelled, method: onPolicyCancelledEvent }

    app.listener.refund:
        class:   AppBundle\Listener\RefundListener
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@app.checkout"
            - "@logger"
            - "%kernel.environment%"
            - "@app.bacs"
        tags:
            -  { name: kernel.event_listener, event: event.policy.cancelled, method: onPolicyCancelledEvent }
            -  { name: kernel.event_listener, event: event.policy.created, method: refundFreeMonthPromo }

    AppBundle\Listener\PosIpListener:
        arguments:
            - '%pos_ips%'
        tags:
            -  { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    AppBundle\Listener\ApiPortListener:
        arguments:
        - "@logger"
        - "%kernel.environment%"
        tags:
        -  { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    app.listener.response:
        class:   AppBundle\Listener\KernelListener
        arguments:
            - "@security.token_storage"
            - "@security.authorization_checker"
            - "%sosure_employee_cookie_value%"
            - "@logger"
            - "%kernel.environment%"
            - "%sosure_employee_cookie_domain%"
        tags:
            -  { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
            -  { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }

    app.listener.hubspot:
        class:   AppBundle\Listener\HubspotKernelListener
        arguments:
            - "@logger"
        tags:
            -  { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    app.listener.security:
        class:   AppBundle\Listener\SecurityListener
        arguments:
            - "@logger"
            - "@request_stack"
            - "@event_dispatcher"
            - "@app.mixpanel"
            - "@snc_redis.default"
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@app.mailer"
        tags:
            -  { name: kernel.event_listener, event: security.interactive_login, method: onSecurityInteractiveLogin }
            -  { name: kernel.event_listener, event: security.interactive_login.actual, method: onActualSecurityInteractiveLogin }
            -  { name: kernel.event_listener, event: security.authentication.failure, method: onAuthenticationFailure }

    app.listener.mailer:
        class:  AppBundle\Listener\MailerListener
        # for now, comment out to avoid circular ref - add back once swift log emailer not in use
        arguments:
            - "@logger"
            - "%kernel.root_dir%/../app/spool/requeue"
        tags:
          - { name: monolog.logger, channel: mailer }
          - { name: "swiftmailer.default.plugin" }

    app.listener.unpaid:
        class: AppBundle\Listener\UnpaidListener
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@app.mailer"
            - "@app.sms"
            - "@app.feature"
        tags:
            -  { name: kernel.event_listener, event: event.scheduledPayment.failed, method: onUnpaidEvent }

    app.form.type.registration:
        class: AppBundle\Form\Type\RegistrationFormType
        arguments: ["@request_stack", "%kernel.environment%"]
        tags:
            - { name: form.type, alias: app_user_registration }

    app.form.type.usersearch:
        class: AppBundle\Form\Type\UserSearchType
        arguments: ["@request_stack", "%kernel.environment%"]
        tags:
            - { name: form.type }

    app.form.type.picsuresearch:
        class: AppBundle\Form\Type\PicSureSearchType
        arguments: ["@request_stack"]
        tags:
            - { name: form.type }

    app.form.type.chargebacks:
        class: AppBundle\Form\Type\ChargebacksType
        arguments: ["@request_stack", "%kernel.environment%"]
        tags:
            - { name: form.type }

    app.form.type.cancelpolicy:
        class: AppBundle\Form\Type\CancelPolicyType
        arguments: ["@app.request", "%kernel.environment%"]
        tags:
        - { name: form.type }

    app.form.type.policysearch:
        class: AppBundle\Form\Type\PolicySearchType
        arguments: ["@request_stack", "%kernel.environment%"]
        tags:
            - { name: form.type }

    app.form.type.claimsearch:
        class: AppBundle\Form\Type\ClaimSearchType
        arguments: ["@request_stack"]
        tags:
            - { name: form.type }

    app.form.type.cashbacksearch:
        class: AppBundle\Form\Type\CashbackSearchType
        arguments: ["@request_stack", "%kernel.environment%"]
        tags:
            - { name: form.type }

    app.form.type.phonemake:
        class: AppBundle\Form\Type\PhoneMakeType
        arguments: ["@doctrine_mongodb.odm.default_document_manager", "%form_required%", "@app.request"]
        tags:
            - { name: form.type }

    app.form.type.phonedropdown:
        class: AppBundle\Form\Type\PhoneDropdownType
        arguments: ["@doctrine_mongodb.odm.default_document_manager", "%form_required%", "@app.request"]
        tags:
            - { name: form.type }

    app.form.type.bacsuploadfile:
        class: AppBundle\Form\Type\UploadFileType
        tags:
            - { name: form.type }

    app.form.type.paymentrequestuploadfile:
        class: AppBundle\Form\Type\PaymentRequestUploadFileType
        tags:
            - { name: form.type }

    app.form.type.mandates:
        class: AppBundle\Form\Type\BacsMandatesType
        arguments: ["@doctrine_mongodb.odm.default_document_manager"]
        tags:
            - { name: form.type }

    app.form.type.claimfnolemail:
        class: AppBundle\Form\Type\ClaimFnolEmailType
        tags:
            - { name: form.type }

    app.form.type.claimfnol:
        class: AppBundle\Form\Type\ClaimFnolType
        arguments: ["%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.claimfnolconfirm:
        class: AppBundle\Form\Type\ClaimFnolConfirmType
        arguments: ["%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.claimfnoldamage:
        class: AppBundle\Form\Type\ClaimFnolDamageType
        arguments: ["@app.claims"]
        tags:
            - { name: form.type }

    app.form.type.claimfnoltheftloss:
        class: AppBundle\Form\Type\ClaimFnolTheftLossType
        arguments: ["@app.claims", "@app.imei"]
        tags:
            - { name: form.type }

    app.form.type.claimfnolupdate:
        class: AppBundle\Form\Type\ClaimFnolUpdateType
        arguments: ["%form_required%", "@app.claims"]
        tags:
            - { name: form.type }

    app.form.type.phonesearch:
        class: AppBundle\Form\Type\PhoneSearchType
        arguments: ["@request_stack"]
        tags:
            - { name: form.type }

    app.form.type.renew:
        class: AppBundle\Form\Type\RenewType
        arguments: ["@request_stack", "%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.renewcashback:
        class: AppBundle\Form\Type\RenewCashbackType
        arguments: ["@request_stack", "%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.bacs:
        class: AppBundle\Form\Type\BacsType
        arguments: ["@app.address", "%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.bacsconfirm:
        class: AppBundle\Form\Type\BacsConfirmType
        arguments: ["@app.address", "%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.cashback:
        class: AppBundle\Form\Type\CashbackType
        arguments: ["@request_stack", "%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.purchasesteppersonal:
        class: AppBundle\Form\Type\PurchaseStepPersonalType
        arguments: ["@request_stack", "%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.purchasesteppersonaladdress:
        class: AppBundle\Form\Type\PurchaseStepPersonalAddressType
        arguments: ["@request_stack", "%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.purchasesteppersonaladdressdropdown:
        class: AppBundle\Form\Type\PurchaseStepPersonalAddressDropdownType
        arguments: ["@request_stack", "%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.purchasestepaddress:
        class: AppBundle\Form\Type\PurchaseStepAddressType
        arguments: ["%form_required%"]
        tags:
            - { name: form.type }

    app.form.type.purchasestepphone:
        class: AppBundle\Form\Type\PurchaseStepPhoneType
        arguments: ["@request_stack", "%form_required%", "@app.imei", "@logger"]
        tags:
            - { name: form.type }

    app.form.type.purchasesteppledge:
        class: AppBundle\Form\Type\PurchaseStepPledgeType
        arguments: ["@request_stack", "%form_required%", "@logger"]
        tags:
            - { name: form.type }

    app.form.type.purchasesteppayment:
        class: AppBundle\Form\Type\PurchaseStepPaymentType
        arguments: ["@request_stack", "%form_required%", "@logger"]
        tags:
            - { name: form.type }

    app.form.type.claim:
        class: AppBundle\Form\Type\ClaimType
        arguments: ["@app.imei"]
        tags:
            - { name: form.type }

    app.form.type.claiminfo:
        class: AppBundle\Form\Type\ClaimInfoType
        arguments: ["@doctrine_mongodb.odm.default_document_manager", "@app.imei"]
        tags:
            - { name: form.type }

    app.form.type.claimcrimeref:
        class: AppBundle\Form\Type\ClaimCrimeRefType
        arguments: ["@app.imei"]
        tags:
            - { name: form.type }

    app.form.type.claimscheck:
        class: AppBundle\Form\Type\ClaimsCheckType
        arguments: ["@request_stack", "%form_required%"]
        tags:
            - { name: form.type }

    app.validator.age:
        class: AppBundle\Validator\Constraints\AgeValidator
        tags:
            - { name: validator.constraint_validator }

    app.validator.renewalconnectionsamount:
        class: AppBundle\Validator\Constraints\RenewalConnectionsAmount
        tags:
            - { name: validator.constraint_validator }

    app.validator.alphanumeric:
        class: AppBundle\Validator\Constraints\AlphanumericValidator
        tags:
            - { name: validator.constraint_validator }

    app.validator.alphanumericspacedot:
        class: AppBundle\Validator\Constraints\AlphanumericSpaceDotValidator
        tags:
            - { name: validator.constraint_validator }

    app.validator.token:
        class: AppBundle\Validator\Constraints\TokenValidator
        tags:
            - { name: validator.constraint_validator }

    app.validator.mobile:
        class: AppBundle\Validator\Constraints\MobileValidator
        tags:
            - { name: validator.constraint_validator }

    app.validator.imei:
        class: AppBundle\Validator\Constraints\ImeiValidator
        tags:
            - { name: validator.constraint_validator }

    app.validator.serialnumber:
        class: AppBundle\Validator\Constraints\SerialNumberValidator
        tags:
            - { name: validator.constraint_validator }

    app.validator.postcode:
        class: AppBundle\Validator\Constraints\PostcodeValidator
        arguments: ["@census.search", "@app.address", "@doctrine_mongodb.odm.census_document_manager"]
        tags:
            - { name: validator.constraint_validator }

    app.validator.sortcode:
        class: AppBundle\Validator\Constraints\SortCodeValidator
        tags:
            - { name: validator.constraint_validator }

    app.validator.bankaccountnumber:
        class: AppBundle\Validator\Constraints\BankAccountNumberValidator
        tags:
            - { name: validator.constraint_validator }

    app.validator.bankaccountname:
        class: AppBundle\Validator\Constraints\BankAccountNameValidator
        arguments:
            - "@app.request"
            - "@logger"
        tags:
            - { name: validator.constraint_validator }

    sitemap.phone:
        class: AppBundle\Service\PhoneSitemapGenerator
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"
            - "@app.router"
        tags:
            - { name: dpn_xml_sitemap.generator }

    two_factor.persister:
        class: AppBundle\Service\DoctrinePersister
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"

    twig.extension.intl:
        class: Twig_Extensions_Extension_Intl
        tags:
            - { name: twig.extension }

    census.search:
        alias: CensusBundle\Service\SearchService
        public: true

    CensusBundle\Service\SearchService:
        arguments:
            - "@doctrine_mongodb.odm.census_document_manager"

    app.gender:
        alias: AppBundle\Service\GenderizeService
        public: true

    AppBundle\Service\GenderizeService:
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@logger"

    app.ops.datacollector:
        class: AppBundle\Service\OpsDataCollector
        tags:
            -
                name:     data_collector
                template: 'opsDataCollector'
                id: "app.ops_collector"
        public: false

    picsureml.picsureml:
        class: PicsureMLBundle\Service\PicsureMLService
        arguments:
            - "@doctrine_mongodb.odm.default_document_manager"
            - "@doctrine_mongodb.odm.picsureml_document_manager"
            - "@oneup_flysystem.mount_manager"
            - "@aws.s3"

    picsureml.listener.picsureml:
        class:   PicsureMLBundle\Listener\PicsureMLListener
        arguments:
            - "@picsureml.picsureml"
            - "@logger"
        tags:
            -  { name: kernel.event_listener, event: event.picsure.received, method: onReceivedEvent }
            -  { name: kernel.event_listener, event: event.picsure.approved, method: onUndamagedEvent }
            -  { name: kernel.event_listener, event: event.picsure.invalid, method: onInvalidEvent }
            -  { name: kernel.event_listener, event: event.picsure.rejected, method: onDamagedEvent }

    picsureml.form.type.search:
        class: PicsureMLBundle\Form\Type\SearchType
        arguments: ["@request_stack", "@picsureml.picsureml", "%form_required%"]
        tags:
            - { name: form.type }

    picsureml.form.type.newversion:
        class: PicsureMLBundle\Form\Type\NewVersionType
        arguments: ["@picsureml.picsureml", "%form_required%"]
        tags:
            - { name: form.type }

    picsureml.form.type.edit:
        class: PicsureMLBundle\Form\Type\EditType
        arguments: ["@picsureml.picsureml", "%form_required%"]
        tags:
            - { name: form.type }

    twig.extension.text:
           class: Twig_Extensions_Extension_Text
           tags:
               - { name: twig.extension }
